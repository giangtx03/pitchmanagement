<?xml version = "1.0" encoding = "UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.pitchmanagement.daos.PitchDao">

    <insert id="insertPitch" parameterType="com.pitchmanagement.dtos.PitchDto" keyProperty="id" useGeneratedKeys="true">
        INSERT INTO
            pitches(name, location, is_active, create_at, update_at, manager_id)
        VALUES( #{name},#{location},#{isActive},#{createAt}, #{updateAt}, #{managerId})
    </insert>

    <select id="getAll" parameterType="map" resultMap="PitchResultMap">
        SELECT
            p.id,
            p.name,
            p.location,
            p.is_active AS isActive,
            p.create_at AS createAt,
            p.update_at AS updateAt,
            mg.id AS managerId,
            mg.full_name AS managerFullname,
            mg.avatar AS managerAvatar,
            AVG(r.star) AS avgStar
        FROM pitches p
        LEFT JOIN sub_pitches sp ON sp.pitch_id = p.id
        LEFT JOIN users mg ON mg.id = p.manager_id
        LEFT JOIN reviews r ON r.pitch_id = p.id
        LEFT JOIN pitch_times pt ON pt.sub_pitch_id = sp.id
        WHERE (#{keyword} IS NULL OR CONCAT(IFNULL(p.name, ''), IFNULL(p.location, ''), IFNULL(mg.full_name, ''))
            LIKE CONCAT('%', #{keyword}, '%'))
            <if test="pitchTypes != null and pitchTypes.length > 0">
                AND sp.pitch_type_id IN
                <foreach collection="pitchTypes" item="type" open="(" separator="," close=")">
                    #{type}
                </foreach>
            </if>
            AND (#{startPrice} IS NULL OR pt.price >= #{startPrice})
            AND (#{endPrice} IS NULL OR #{endPrice} >= pt.price)
            AND p.is_active
            AND sp.is_active
            AND pt.is_active
        GROUP BY p.id, p.name, p.location, p.is_active, p.create_at, p.update_at, mg.id, mg.full_name, mg.avatar
        HAVING (#{starRange} IS NULL OR #{starRange} = 0 OR AVG(IFNULL(r.star, 0)) >= #{starRange})
    </select>

    <select id="getPitchById" parameterType="Long" resultType="com.pitchmanagement.dtos.PitchDto">
        SELECT
            p.id,
            p.name,
            p.location,
            p.is_active AS isActive,
            p.manager_id AS managerId,
            p.create_at AS createAt,
            p.update_at AS updateAt,
            AVG(r.star) AS avgStar
        FROM pitches p
        LEFT JOIN reviews r ON r.pitch_id = p.id
        WHERE p.id = #{id}
        GROUP BY p.id, p.name, p.location, p.is_active, p.manager_id, p.create_at, p.update_at
    </select>

    <update id="updatePitch" parameterType="com.pitchmanagement.dtos.PitchDto" >
        UPDATE pitches SET
            name = #{name},
            location = #{location},
            is_active = #{isActive},
            update_at = #{updateAt}
        WHERE id = #{id}
    </update>

    <resultMap id="PitchResultMap" type="com.pitchmanagement.dtos.PitchDto">
        <id column="id" property="id" />
        <result column="name" property="name" />
        <result column="location" property="location" />
        <result column="createAt" property="createAt" />
        <result column="updateAt" property="updateAt" />
        <result column="isActive" property="isActive" />
        <result column="managerId" property="managerId" />
        <result column="avgStar" property="avgStar" />

        <association property="managerDto" javaType="com.pitchmanagement.dtos.UserDto">
            <id column="managerId" property="id" />
            <result column="managerFullname" property="fullname" />
            <result column="managerAvatar" property="avatar" />
        </association>
    </resultMap>

</mapper>